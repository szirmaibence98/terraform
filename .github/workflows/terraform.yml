name: 'Terraform Azure CI/CD'

on:
  push:
    branches:
      - main # Adjust this as needed for your workflow
  pull_request:
    branches:
      - main # Adjust this as needed for your workflow
  workflow_dispatch: # Add this line to enable manual triggering

jobs:
  terraform_plan:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_ENV: dev # Set your Terraform environment here

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ env.TF_ENV }}.terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file="${{ env.TF_ENV }}.tfvars" -out="${{ env.TF_ENV }}.tfplan"

      - name: Archive Terraform Plan
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: ${{ env.TF_ENV }}.tfplan


  terraform_apply:
    name: 'Terraform Apply'
    needs: terraform_plan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_ENV: dev # Set your Terraform environment here

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Download Terraform Plan
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: ${{ github.workspace }}          

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ env.TF_ENV }}.terraform.tfstate"

      - name: Terraform Apply
        run: |
          ls -al
          echo "Plan file: ${{ env.TF_ENV }}.tfplan"
          terraform apply -auto-approve "${{ env.TF_ENV }}.tfplan"


      - name: Manual Approval
        if: always() && github.event_name == 'push' # Only run on push events
        uses: peter-evans/wait-action@v2
        with:
          timeout: 5m
          message: "Please review changes and approve this deployment."
  
      - name: Check if Manual Approval is Granted
        if: steps.manual_approval.outputs.approved == 'false'
        run: |
          echo "Manual approval not granted, skipping Terraform apply."      

  terraform_destroy:
    name: 'Terraform Destroy'
    needs: terraform_apply
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      TF_ENV: dev # Set your Terraform environment here

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: latest

      - name: Terraform Init
        run: terraform init -backend-config="key=${{ env.TF_ENV }}.terraform.tfstate"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve